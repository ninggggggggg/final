from flask import Flask, request, jsonify, session, render_template, send_from_directory, redirect, url_for, render_template_string
from ldap3 import Server, Connection, ALL, SUBTREE
from werkzeug.utils import secure_filename
import os

app = Flask(__name__)
app.secret_key = os.getenv("SECRET_KEY")

UPLOAD_FOLDER_BASE = 'uploads'
UPLOAD_FOLDER = {
    'student': os.path.join(UPLOAD_FOLDER_BASE, 'students'),
    'teacher': os.path.join(UPLOAD_FOLDER_BASE, 'teachers')
}

# T·∫°o folder n·∫øu ch∆∞a c√≥
for folder in UPLOAD_FOLDER.values():
    os.makedirs(folder, exist_ok=True)

LDAP_SERVER = os.getenv("LDAP_SERVER")
LDAP_BASE_DN = os.getenv("LDAP_BASE_DN")
LDAP_BIND_USER = os.getenv("LDAP_BIND_USER")
LDAP_BIND_PASSWORD = os.getenv("LDAP_BIND_PASSWORD")



@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        if 'guest_access' in request.form:
            session['username'] = 'guest'
            session['role'] = 'guest'
            return redirect(url_for('labs_home'))
        
        username = request.form['username']
        password = request.form['password']

        # GI·∫¢ L·∫¨P NG∆Ø·ªúI D√ôNG C·ªê ƒê·ªäNH
        mock_users = {
            'studentA': {'password': '123', 'role': 'student'},
            'teacherA': {'password': '456', 'role': 'teacher'}
        }

        user = mock_users.get(username)
        if user and user['password'] == password:
            session['username'] = username
            session['role'] = user['role']
            return redirect(url_for(f"{user['role']}_home"))
        else:
            return render_template('login.html', error='Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u!')

    return render_template('login.html')


@app.route('/')
def index():
    if 'username' in session:
        if session['role'] == 'teacher':
            return redirect(url_for('teacher_home'))
        elif session['role'] == 'student':
            return redirect(url_for('student_home'))
    return redirect(url_for('login'))

@app.route('/labs')
def labs_home():
    # D·ªØ li·ªáu cho Kill Chain
    kill_chain = [
        {
            "phase": "1. Reconnaissance",
            "description": "Thu th·∫≠p th√¥ng tin m·ª•c ti√™u v√† d√≤ qu√©t h·ªá th·ªëng.",
            "labs": [1]
        },
        {
            "phase": "2. Weaponization", 
            "description": "Chu·∫©n b·ªã c√¥ng c·ª• v√† payload ƒë·ªÉ t·∫•n c√¥ng h·ªá th·ªëng.",
            "labs": [2]
        },
        {
            "phase": "3. Delivery",
            "description": "G·ª≠i payload qua endpoint /search v√† ƒëƒÉng nh·∫≠p m√°y tr·∫°m.",
            "labs": [1, 2]
        },
        {
            "phase": "4. Exploitation",
            "description": "Khai th√°c l·ªó h·ªïng SSTI v√† k·ªπ thu·∫≠t Kerberoasting.",
            "labs": [1, 2, 3]
        },
        {
            "phase": "5. Installation",
            "description": "Truy c·∫≠p domain controller v√† c√†i foothold (hash access).",
            "labs": [3]
        },
        {
            "phase": "6. Command & Control",
            "description": "ƒêi·ªÅu khi·ªÉn m√°y ch·ªß th√¥ng qua k·ªπ thu·∫≠t Pass-the-Hash.",
            "labs": [3]
        },
        {
            "phase": "7. Actions on Objectives",
            "description": "Chi·∫øm quy·ªÅn truy c·∫≠p, tr√≠ch xu·∫•t d·ªØ li·ªáu nh·∫°y c·∫£m.",
            "labs": [1, 2, 3]
        }
    ]

    # D·ªØ li·ªáu cho c√°c Lab
    labs = [
        {
            "id": 1,
            "title": "üí• Exploiting SSTI in Flask WebApp",
            "category": "Reconnaissance",
            "difficulty": "Beginner",
            "description": "Kh√°m ph√° k·ªπ thu·∫≠t thu th·∫≠p th√¥ng tin v√† khai th√°c l·ªó h·ªïng Server-Side Template Injection (SSTI) tr√™n m·ªôt ·ª©ng d·ª•ng Flask c·∫•u h√¨nh sai.",
            "objectives": [
                "D√≤ t√¨m endpoint b·ªã l·ªô ho·∫∑c c·∫•u h√¨nh sai",
                "X√°c ƒë·ªãnh v√† khai th√°c l·ªó h·ªïng SSTI",
                "Th·ª±c thi m√£ l·ªánh v√† ƒë·ªçc file n·ªôi b·ªô tr√™n server",
                "Tr√≠ch xu·∫•t th√¥ng tin nh·∫°y c·∫£m ph·ª•c v·ª• t·∫•n c√¥ng k·∫ø ti·∫øp"
            ],
            "url": "/labs/1"
        },
        {
            "id": 2,
            "title": "üß† Privilege Escalation & AD Hash Extraction",
            "category": "Lateral Movement",
            "difficulty": "Intermediate",
            "description": "M√¥ ph·ªèng qu√° tr√¨nh leo thang ƒë·∫∑c quy·ªÅn trong m√¥i tr∆∞·ªùng domain th√¥ng qua k·ªπ thu·∫≠t Kerberoasting v√† AS-REP Roasting, b·∫Øt ƒë·∫ßu t·ª´ m·ªôt t√†i kho·∫£n ng∆∞·ªùi d√πng th√¥ng th∆∞·ªùng ƒë√£ b·ªã chi·∫øm quy·ªÅn.",
            "objectives": [
                "Chi·∫øm quy·ªÅn truy c·∫≠p m√°y tr·∫°m n·ªôi b·ªô (Workstation01)",
                "Th·ª±c hi·ªán AS-REP Roasting ƒë·ªÉ thu th·∫≠p hash t·ª´ t√†i kho·∫£n kh√¥ng y√™u c·∫ßu pre-auth",
                "Th·ª±c hi·ªán Kerberoasting ƒë·ªÉ thu th·∫≠p hash t·ª´ t√†i kho·∫£n c√≥ SPN",
                "Crack offline c√°c hash ƒë·ªÉ l·∫•y th√¥ng tin ƒëƒÉng nh·∫≠p c√≥ ƒë·∫∑c quy·ªÅn cao h∆°n"
            ],
            "url": "/labs/2"
        },
        {
            "id": 3,
            "title": "üõ°Ô∏è Exploiting Backup Privileges on Domain Controller",
            "category": "Privilege Escalation",
            "difficulty": "Advanced",
            "description": "M√¥ ph·ªèng t·∫•n c√¥ng v√†o Domain Controller b·∫±ng c√°ch l·∫°m d·ª•ng quy·ªÅn SeBackupPrivilege ƒë·ªÉ dump registry hive (SAM & SYSTEM) v√† tr√≠ch xu·∫•t hash m·∫≠t kh·∫©u t·ª´ m√°y ch·ªß AD, kh√¥ng c·∫ßn ƒë·∫∑c quy·ªÅn admin.",
            "objectives": [
                "S·ª≠ d·ª•ng t√†i kho·∫£n c√≥ quy·ªÅn SeBackupPrivilege (Backup Operators)",
                "Dump offline SAM v√† SYSTEM t·ª´ Domain Controller",
                "Tr√≠ch xu·∫•t v√† ph√¢n t√≠ch NTLM hash b·∫±ng c√¥ng c·ª• nh∆∞ secretsdump.py",
                "S·ª≠ d·ª•ng k·ªπ thu·∫≠t Pass-the-Hash ho·∫∑c crack offline ƒë·ªÉ m·ªü r·ªông quy·ªÅn truy c·∫≠p"
            ],
            "url": "/labs/3"
        }
    ]
    
    return render_template('lab.html', kill_chain=kill_chain, labs=labs)

@app.route('/labs/1')
def lab1():
    return render_template('lab1.html')

@app.route('/labs/2')
def lab2():
    return render_template('lab2.html')

@app.route('/labs/3')
def lab3():
    return render_template('lab3.html')



@app.route('/search')
def search_files():
    role = request.args.get('role')

    if role not in UPLOAD_FOLDER:
        role = 'student'  # M·∫∑c ƒë·ªãnh l√† student n·∫øu kh√¥ng c√≥ role

    search_term = request.args.get('q', '').lower()
    all_files = os.listdir(UPLOAD_FOLDER[role])
    filtered_files = [f for f in all_files if search_term in f.lower()] if search_term else all_files

    ssti_input = request.args.get('q', '')

    template = f"""
    <form action="" method="get">
        <input type="hidden" name="role" value="{role}">
        <input type="text" name="q" value="{ssti_input}" placeholder="T√¨m t√†i li·ªáu...">
        <button type="submit">Search</button>
    </form>

    <h3>T√¨m th·∫•y {len(filtered_files)} file</h3>
    <p>File ƒë·∫ßu ti√™n t√¨m ƒë∆∞·ª£c (c√≥ th·ªÉ ch·ª©a SSTI): {ssti_input}</p>

    <ul>
        {{% for file in files %}}
            <li>{{{{ file }}}}</li>
        {{% endfor %}}
    </ul>
    """

    return render_template_string(template, files=filtered_files)

@app.route('/student', methods=['GET', 'POST'])
def student_home():
    if 'username' not in session or session['role'] != 'student':
        return redirect(url_for('login'))

    error = None
    success = None

    if request.method == 'POST':
        if 'file' not in request.files:
            error = 'Kh√¥ng c√≥ file upload!'
        else:
            file = request.files['file']
            if file.filename == '':
                error = 'T√™n file tr·ªëng!'
            else:
                try:
                    filename = secure_filename(file.filename)
                    file.save(os.path.join(UPLOAD_FOLDER['student'], filename))
                    success = f'ƒê√£ t·∫£i l√™n th√†nh c√¥ng: {filename}'
                except Exception as e:
                    error = f'L·ªói khi t·∫£i file: {str(e)}'

    return render_template('student_home.html', error=error, success=success)


@app.route('/teacher', methods=['GET', 'POST'])
def teacher_home():
    if 'username' not in session or session['role'] != 'teacher':
        return redirect(url_for('login'))

    error = None
    success = None
    
    if request.method == 'POST':
        if 'file' not in request.files:
            error = 'Kh√¥ng c√≥ file upload!'
        else:
            file = request.files['file']
            if file.filename == '':
                error = 'T√™n file tr·ªëng!'
            else:
                try:
                    filename = secure_filename(file.filename)
                    file.save(os.path.join(UPLOAD_FOLDER['teacher'], filename))
                    success = f'ƒê√£ t·∫£i l√™n th√†nh c√¥ng: {filename}'
                except Exception as e:
                    error = f'L·ªói khi t·∫£i file: {str(e)}'

    return render_template('teacher_home.html', error=error, success=success)

@app.route('/uploads/<role>/<filename>')
def uploaded_file(role, filename):
    if role not in UPLOAD_FOLDER:
        return "Kh√¥ng h·ª£p l·ªá!", 403
    if 'username' not in session or session['role'] != role:
        return redirect(url_for('login'))

    return send_from_directory(UPLOAD_FOLDER[role], filename)


@app.route('/logout')
def logout():
    session.clear()
    return redirect(url_for('login'))


if __name__ == '__main__':
    app.run(debug=True)